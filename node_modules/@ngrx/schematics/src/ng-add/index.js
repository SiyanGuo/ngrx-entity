"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
var schematics_1 = require("@angular-devkit/schematics");
var schematics_core_1 = require("../../schematics-core");
function updateSchematicCollections(host) {
    var workspace = (0, schematics_core_1.getWorkspace)(host);
    var path = (0, schematics_core_1.getWorkspacePath)(host);
    if (!(workspace['cli'] && workspace['cli']['schematicCollections'])) {
        throw new Error('schematicCollections is not defined in the global cli options');
    }
    workspace['cli']['schematicCollections'] = __spreadArray(__spreadArray([], __read(workspace['cli']['schematicCollections']), false), [
        '@ngrx/schematics',
    ], false);
    host.overwrite(path, JSON.stringify(workspace, null, 2));
}
function updateWorkspaceCli() {
    return function (host) {
        updateSchematicCollections(host);
        return host;
    };
}
function default_1() {
    return function (host, context) {
        return (0, schematics_1.chain)([updateWorkspaceCli()])(host, context);
    };
}
exports["default"] = default_1;
//# sourceMappingURL=index.js.map